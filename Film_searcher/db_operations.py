import mysql.connector
from db_setup import get_connection


def database_is_exists(db_name: str) -> bool:
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("SHOW DATABASES")
        databases = [db[0] for db in cursor.fetchall()]

        cursor.close()
        conn.close()

        return db_name in databases
    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞: {err}")
        return False


def fetch_table_rows(conn, table_name: str) -> list[tuple[int, set[str]]]:
    try:
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT film_id, title, description, special_features FROM {table_name}")
        results = cursor.fetchall()

        documents = []
        for row in results:
            key = row[0]
            words = set()

            for val in row[1:]:
                if isinstance(val, set):
                    words.update(" ".join(val).split())
                elif isinstance(val, str):
                    words.update(val.split())

            documents.append((key, words))

        return documents
    except mysql.connector.Error as err:
        print(f"Error fetching data: {err}")
        return []
    finally:
        if 'cursor' in locals():
            cursor.close()


def find_films_by_year(conn, table_name: str, year: int):
    try:
        cursor = conn.cursor()
        query = f"SELECT film_id FROM {table_name} WHERE release_year = %s"

        cursor.execute(query, (year,))

        results = cursor.fetchall()
        return results if results else []

    except mysql.connector.Error as err:
        print(f"Error fetching data: {err}")
        return []
    finally:
        if 'cursor' in locals():
            cursor.close()


def get_all_users_statistics() -> str:
    try:

        conn = get_connection(db_name='sumarokovav_300924')
        cursor = conn.cursor()

        query = """
        SELECT u.user_name, COUNT(s.query) AS total_queries
        FROM Users u
        LEFT JOIN Statistics s ON u.id = s.user_id
        GROUP BY u.user_name
        ORDER BY total_queries DESC;
        """

        cursor.execute(query)
        results = cursor.fetchall()

        if not results:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö."

        stats = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
        stats += "\n".join([f"{row[0]}: {row[1]} –∑–∞–ø—Ä–æ—Å–æ–≤" for row in results])

        return stats

    except mysql.connector.Error as err:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {err}"

    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals() and conn.is_connected():
            conn.close()


def get_user_statistics(username: str) -> str:
    try:
        conn = get_connection(db_name='sumarokovav_300924')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT id FROM Users WHERE user_name = %s", (username,))
        user = cursor.fetchone()

        if not user:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω."

        user_id = user[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute(
            "SELECT COUNT(*) FROM Statistics WHERE user_id = %s", (user_id,))
        total_queries = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞—Ç–∞–º–∏
        cursor.execute(
            "SELECT query, created_at FROM Statistics WHERE user_id = %s ORDER BY created_at DESC",
            (user_id,)
        )
        recent_queries = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã–≤–æ–¥–∞
        stats = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}:\n"
        stats += f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}\n"
        stats += "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã:\n"

        if recent_queries:
            stats += "\n".join(f"{query} | {created_at} " for query,
                               created_at in recent_queries)
        else:
            stats += "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤."

        return stats

    except mysql.connector.Error as err:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {err}"

    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals() and conn.is_connected():
            conn.close()


def change_user_information(username: str, field: str, new_value: str) -> str:
    try:
        conn = get_connection(db_name='sumarokovav_300924')
        cursor = conn.cursor()

        cursor.execute(
            "SELECT id FROM Users WHERE user_name = %s", (username,))
        user = cursor.fetchone()

        if not user:
            return f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω."

        user_id = user[0]

        cursor.execute("SHOW COLUMNS FROM Users;")
        valid_fields = {row[0] for row in cursor.fetchall()}
        if field not in valid_fields:
            return f"–û—à–∏–±–∫–∞: –ü–æ–ª—è '{field}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Users."

        query = f"UPDATE Users SET {field} = %s WHERE id = %s"
        cursor.execute(query, (new_value, user_id))
        conn.commit()

        return "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"

    except mysql.connector.Error as err:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {err}"

    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals() and conn.is_connected():
            conn.close()


def user_exists_in_database(username: str) -> bool:
    conn = get_connection(db_name='sumarokovav_300924')
    cursor = conn.cursor()

    query = "SELECT id FROM Users WHERE user_name = %s"
    cursor.execute(query, (username,))
    result = cursor.fetchone()

    cursor.close()
    conn.close()

    return result is not None


def fetch_user_info(username: str) -> dict[str, str]:
    conn = get_connection(db_name='sumarokovav_300924')
    cursor = conn.cursor()

    query = "SELECT first_name, last_name FROM Users WHERE user_name = %s"
    cursor.execute(query, (username,))
    result = cursor.fetchone()

    cursor.close()
    conn.close()

    if result:
        return {"first_name": result[0], "last_name": result[1]}
    else:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def add_user_to_database(username: str, first_name: str, last_name: str) -> None:
    conn = get_connection(db_name='sumarokovav_300924')
    cursor = conn.cursor()

    query = "INSERT INTO Users (user_name, first_name, last_name) VALUES (%s, %s, %s)"
    cursor.execute(query, (username, first_name, last_name))

    conn.commit()

    cursor.close()
    conn.close()

    print(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


def get_user_id(username: str) -> int | None:
    # –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    conn = get_connection(db_name='sumarokovav_300924')
    if not conn:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
        return None

    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id FROM Users WHERE user_name = %s", (username,))
        result = cursor.fetchone()
        return result[0] if result else None

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ user_id: {err}")
        return None

    finally:
        cursor.close()
        conn.close()


def find_films_by_year(conn, table_name: str, year: int) -> list[tuple[int]]:
    try:
        cursor = conn.cursor()
        query = f"SELECT film_id FROM {table_name} WHERE release_year = %s"
        # –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ (SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã)
        cursor.execute(query, (year,))

        results = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        return results if results else []

    except mysql.connector.Error as err:
        print(f"Error fetching data: {err}")
        return []
    finally:
        if 'cursor' in locals():
            cursor.close()


def save_query_results(user_id: int, query: str, film_ids: list[int]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –≤ –ë–î"""
    conn = get_connection(db_name='sumarokovav_300924')
    if not conn:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
        return

    try:
        cursor = conn.cursor()
        # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Statistics
        cursor.execute(
            "INSERT INTO Statistics (query, user_id) VALUES (%s, %s)", (query, user_id))
        query_id = cursor.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if not query_id:
            print("–û—à–∏–±–∫–∞: query_id –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return
        # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º—ã –≤ Responses
        if film_ids:
            cursor.executemany("INSERT INTO Responses (film_id, query_id) VALUES (%s, %s)",
                               [(film_id, query_id) for film_id in film_ids])

        conn.commit()

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        cursor.close()
        conn.close()
